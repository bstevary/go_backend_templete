// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package model

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const alterUserAccountStatus = `-- name: AlterUserAccountStatus :one
UPDATE users
SET
  updated_at = NOW(),
  is_account_active = COALESCE($2, is_account_active),
  is_email_verified = COALESCE($3, is_email_verified)
WHERE user_id = $1
RETURNING user_id, first_name, last_name, email, gender, hashed_password, password_changed_at, date_of_birth, created_at, updated_at, is_email_verified, is_account_active
`

type AlterUserAccountStatusParams struct {
	UserID          int64       `json:"user_id"`
	IsAccountActive pgtype.Bool `json:"is_account_active"`
	IsEmailVerified pgtype.Bool `json:"is_email_verified"`
}

func (q *Queries) AlterUserAccountStatus(ctx context.Context, arg AlterUserAccountStatusParams) (User, error) {
	row := q.db.QueryRow(ctx, alterUserAccountStatus, arg.UserID, arg.IsAccountActive, arg.IsEmailVerified)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmailVerified,
		&i.IsAccountActive,
	)
	return i, err
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name,
    last_name,
    email,
    gender, 
    hashed_password,
    date_of_birth
      )VALUES ($1, $2, $3, $4, $5, $6 
) RETURNING user_id, first_name,  last_name,  email, gender, date_of_birth
`

type CreateUserParams struct {
	FirstName      string    `json:"first_name"`
	LastName       string    `json:"last_name"`
	Email          string    `json:"email"`
	Gender         string    `json:"gender"`
	HashedPassword string    `json:"hashed_password"`
	DateOfBirth    time.Time `json:"date_of_birth"`
}

type CreateUserRow struct {
	UserID      int64     `json:"user_id"`
	FirstName   string    `json:"first_name"`
	LastName    string    `json:"last_name"`
	Email       string    `json:"email"`
	Gender      string    `json:"gender"`
	DateOfBirth time.Time `json:"date_of_birth"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Gender,
		arg.HashedPassword,
		arg.DateOfBirth,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.DateOfBirth,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE email = $1
RETURNING user_id
`

func (q *Queries) DeleteUser(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, deleteUser, email)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, first_name,  last_name,  email, gender, date_of_birth,  is_email_verified, is_account_active, created_at  FROM users
WHERE  user_id > $1
ORDER BY user_id 
LIMIT $2
`

type ListUsersParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
}

type ListUsersRow struct {
	UserID          int64     `json:"user_id"`
	FirstName       string    `json:"first_name"`
	LastName        string    `json:"last_name"`
	Email           string    `json:"email"`
	Gender          string    `json:"gender"`
	DateOfBirth     time.Time `json:"date_of_birth"`
	IsEmailVerified bool      `json:"is_email_verified"`
	IsAccountActive bool      `json:"is_account_active"`
	CreatedAt       time.Time `json:"created_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Gender,
			&i.DateOfBirth,
			&i.IsEmailVerified,
			&i.IsAccountActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT user_id, first_name, last_name, email, gender, hashed_password, password_changed_at, date_of_birth, created_at, updated_at, is_email_verified, is_account_active FROM users
WHERE email = $1 
LIMIT 1
`

func (q *Queries) SelectUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmailVerified,
		&i.IsAccountActive,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
  updated_at = NOW(),
  first_name = COALESCE($2, first_name),
  last_name = COALESCE($3, last_name),
  date_of_birth = COALESCE($4, date_of_birth),  
  gender = COALESCE(
    $5,
    gender
  )
  WHERE email = $1
 RETURNING user_id, first_name,  last_name,  email, gender, date_of_birth
`

type UpdateUserParams struct {
	Email       string      `json:"email"`
	FirstName   pgtype.Text `json:"first_name"`
	LastName    pgtype.Text `json:"last_name"`
	DateOfBirth pgtype.Date `json:"date_of_birth"`
	Gender      pgtype.Text `json:"gender"`
}

type UpdateUserRow struct {
	UserID      int64     `json:"user_id"`
	FirstName   string    `json:"first_name"`
	LastName    string    `json:"last_name"`
	Email       string    `json:"email"`
	Gender      string    `json:"gender"`
	DateOfBirth time.Time `json:"date_of_birth"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Gender,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.DateOfBirth,
	)
	return i, err
}

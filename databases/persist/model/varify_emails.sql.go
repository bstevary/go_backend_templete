// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: varify_emails.sql

package model

import (
	"context"
)

const createActivateAccountEmail = `-- name: CreateActivateAccountEmail :one
INSERT INTO "varify_email" (
    user_id,
    email,
    secret_code
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, email, secret_code, is_used, created_at, expired_at
`

type CreateActivateAccountEmailParams struct {
	UserID     int64  `json:"user_id"`
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) CreateActivateAccountEmail(ctx context.Context, arg CreateActivateAccountEmailParams) (VarifyEmail, error) {
	row := q.db.QueryRow(ctx, createActivateAccountEmail, arg.UserID, arg.Email, arg.SecretCode)
	var i VarifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateActivateAccountEmail = `-- name: UpdateActivateAccountEmail :one
UPDATE "varify_email"
SET
    is_used = TRUE
WHERE secret_code = $1
    AND is_used = FALSE
    AND expired_at > now()
RETURNING id, user_id, email, secret_code, is_used, created_at, expired_at
`

func (q *Queries) UpdateActivateAccountEmail(ctx context.Context, secretCode string) (VarifyEmail, error) {
	row := q.db.QueryRow(ctx, updateActivateAccountEmail, secretCode)
	var i VarifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
